import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';

@Injectable()
export class PhotoUploadInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const request = context.switchToHttp().getRequest();
    const body = request.body;

    try {
      // Production-·Éñ·Éî ·Éê·É† ·Éï·Éò·Éú·Éê·ÉÆ·Éê·Éï·Éó ·É§·Éê·Éò·Éö·Éî·Éë·É°, ·Éï·É¢·Éù·Éï·Éî·Éë·Éó base64-·Éê·Éì
      console.log('üì∏ PhotoUploadInterceptor: Processing request');
      
      // ·Éõ·ÉÆ·Éù·Éö·Éù·Éì ·Éï·Éê·Éö·Éò·Éì·Éê·É™·Éò·Éê - photos ·É£·Éú·Éì·Éê ·Éò·Éß·Éù·É° ·Éõ·Éê·É°·Éò·Éï·Éò
      if (body.photos && !Array.isArray(body.photos)) {
        body.photos = [];
      }
      
      // hazards ·Éï·Éê·Éö·Éò·Éì·Éê·É™·Éò·Éê
      if (body.hazards && Array.isArray(body.hazards)) {
        body.hazards.forEach((hazard: any) => {
          if (hazard.photos && !Array.isArray(hazard.photos)) {
            hazard.photos = [];
          }
        });
      }
      
      console.log('üì∏ Validation complete - photos will be stored as base64 in MongoDB');
    } catch (error) {
      console.error('‚ùå PhotoUploadInterceptor error:', error);
    }

    return next.handle();
  }
}
